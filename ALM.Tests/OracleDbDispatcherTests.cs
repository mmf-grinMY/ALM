using ALM.Logging;

using System.Text.RegularExpressions;
using System;

using NetTopologySuite.Geometries;

using Oracle.ManagedDataAccess.Client;
using Xunit;

using Moq;

namespace ALM.Tests
{
    public class OracleDbDispatcherTests
    {
        [Theory]
        [InlineData("479F8A3A-91A4-42BF-819F-B6EDB68CB25E")]
        public void GetLongGeometry_GetObject(string guid)
        {
            var expected = "MULTILINESTRING((23025.286 19157.158,23044.406 19148.256,23063.43 19139.161,23082.332 19129.819,23101.089 19120.182,23119.69 19110.236,23138.14 19100.004,23156.444 19089.509,23174.607 19078.772,23192.635 19067.818,23210.532 19056.668,23228.333 19045.381,23246.112 19034.064,23263.95 19022.829,23281.924 19011.788,23300.115 19001.051,23318.554 18990.668,23337.041 18980.362,23355.302 18969.758,23373.062 18958.479,23390.053 18946.154,23406.23 18932.72,23421.863 18918.539,23437.245 18904.006,23452.669 18889.515,23468.428 18875.461,23484.815 18862.238,23501.988 18850.061,23519.741 18838.662,23537.806 18827.691,23555.918 18816.801,23573.939 18805.81,23591.903 18794.765,23609.858 18783.728,23627.853 18772.763,23645.935 18761.933,23664.15 18751.299,23682.534 18740.906,23700.973 18730.589,23719.25 18720.036,23737.147 18708.932,23754.456 18696.979,23771.16 18684.154,23787.4 18670.672,23803.325 18656.754,23819.081 18642.618,23834.776 18628.42,23850.475 18614.245,23866.243 18600.176,23882.144 18586.296,23898.242 18572.688,23914.602 18559.435,23931.287 18546.619,23948.361 18534.323,23965.846 18522.581,23983.689 18511.338,24001.828 18500.53,24020.201 18490.095,24038.747 18479.968,24057.405 18470.087,24076.128 18460.385,24094.888 18450.792,24113.659 18441.237,24132.416 18431.65,24151.134 18421.959,24169.786 18412.095,24188.348 18401.987,24206.797 18391.575,24225.165 18380.941,24243.517 18370.261,24261.921 18359.712,24280.444 18349.472,24299.151 18339.719,24318.111 18330.63,24337.389 18322.383,24357.052 18315.154,24377.115 18308.978,24397.488 18303.606,24418.068 18298.754,24438.754 18294.14,24459.45 18289.503,24480.131 18284.901,24500.827 18280.62,24521.57 18276.952,24542.39 18274.186,24563.315 18272.574,24584.336 18271.965,24605.426 18271.98,24626.558 18272.238,24647.705 18272.356,24668.838 18271.953,24689.93 18270.653,24710.936 18268.255,24731.798 18264.747,24752.453 18260.13,24772.84 18254.402,24792.898 18247.564,24812.558 18239.615,24831.71 18230.552,24850.233 18220.375,24868.006 18209.08,24884.929 18196.681,24901.065 18183.293,24916.536 18169.072,24931.467 18154.176,24945.98 18138.76,24960.2 18122.98,24974.251 18106.993,24988.256 18090.955,25002.338 18075.023,25016.624 18059.348,25031.242 18044.078,25046.321 18029.358,25061.988 18015.334,25078.368 18002.148,25095.457 17989.821,25113.132 17978.256,25131.264 17967.356,25149.724 17957.018,25168.398 17947.141,25187.223 17937.607,25206.146 17928.299,25225.112 17919.099,25244.068 17909.887,25262.961 17900.547,25281.736 17890.959,25300.339 17881.006,25318.759 17870.66,25337.069 17860.085,25355.352 17849.463,25373.691 17838.982,25392.17 17828.824,25410.874 17819.177,25429.885 17810.223,25449.262 17802.093,25468.954 17794.667,25488.879 17787.76,25508.958 17781.186,25529.108 17774.759,25549.25 17768.295,25569.31 17761.627,25589.287 17754.771,25609.222 17747.839,25629.153 17740.95,25649.12 17734.218,25669.164 17727.759,25689.323 17721.688,25709.617 17716.058,25730.027 17710.816,25750.535 17705.902,25771.119 17701.253,25791.76 17696.808,25812.436 17692.505,25833.128 17688.283,25853.815 17684.08,25874.485 17679.853,25895.138 17675.583,25915.773 17671.255,25936.39 17666.853,25956.988 17662.359,25977.568 17657.758,25998.13 17653.034,26018.675 17648.19,26039.218 17643.303,26059.771 17638.471,26080.352 17633.79,26100.975 17629.356,26121.654 17625.266,26142.406 17621.615,26163.245 17618.499,26184.174 17615.966,26205.178 17613.99,26226.242 17612.543,26247.348 17611.596,26268.483 17611.118,26289.629 17611.081,26310.77 17611.456,26331.891 17612.213,26352.978 17613.321,26374.03 17614.736,26395.054 17616.41,26416.056 17618.293,26437.041 17620.335,26458.016 17622.488,26478.987 17624.702,26499.958 17626.949,26520.923 17629.251,26541.879 17631.64,26562.82 17634.148,26583.74 17636.806,26604.636 17639.646,26625.502 17642.687,26646.344 17645.902,26667.166 17649.25,26687.975 17652.689,26708.775 17656.179,26729.573 17659.679,26750.373 17663.161,26771.171 17666.638,26791.966 17670.136,26812.753 17673.678,26833.53 17677.288,26854.291 17680.991,26875.035 17684.81,26895.758 17688.769,26916.454 17692.893,26937.116 17697.205,26957.731 17701.729,26978.291 17706.489,26998.783 17711.509,27019.198 17716.814,27039.525 17722.425,27059.753 17728.369,27079.88 17734.644,27099.931 17741.17,27119.935 17747.852,27139.922 17754.592,27159.922 17761.296,27179.964 17767.866,27200.079 17774.209,27220.268 17780.314,27240.507 17786.258,27260.771 17792.124,27281.032 17797.994,27301.264 17803.952,27321.441 17810.079,27341.537 17816.458,27361.525 17823.172,27381.396 17830.25,27401.181 17837.597,27420.914 17845.097,27440.634 17852.637,27460.375 17860.102,27480.174 17867.378,27500.066 17874.352,27520.089 17880.908,27540.278 17886.933,27560.644 17892.38,27581.155 17897.321,27601.771 17901.84,27622.457 17906.019,27643.196 17909.892,27663.985 17913.457,27684.824 17916.712,27705.709 17919.653,27726.64 17922.279,27747.613 17924.583,27768.623 17926.557,27789.662 17928.19,27810.726 17929.471,27831.806 17930.391,27852.897 17930.938,27873.992 17931.104,27895.086 17930.9,27916.177 17930.37,27937.26 17929.558,27958.333 17928.508,27979.392 17927.265,28000.435 17925.874,28021.457 17924.377,28042.464 17922.8,28063.47 17921.14,28084.488 17919.391,28105.535 17917.548,28126.619 17915.599,28147.719 17913.481,28168.802 17911.115,28189.835 17908.423,28210.785 17905.325,28231.617 17901.74,28252.3 17897.591,28272.8 17892.798,28293.083 17887.282,28313.117 17880.964,28332.899 17873.852,28352.472 17866.081))";

            var repository = new OracleRepository(new OracleConnection(TestUtils.ConnectionString));
            var primitive = repository.GetByGuid(guid);
            var actual = repository.GetLongGeometry(primitive);

            Assert.Equal(expected, actual);
        }
        [Theory]
        [DatFileData("longgeometrybadobjects.dat", "300E")]
        [DatFileData("longgeometrybadobjects2.dat", "300E")]
        public void GetObjectByGuid(string guid, string horizon)
        {
            var repository = TestUtils.Repository;
            var primitive = repository.GetByGuid(guid, horizon);
            var actual = repository.GetLongGeometry(primitive, horizon);

            var dispatcher = new Mock<IDbDispatcher>();
            dispatcher.Setup(d => d.GetLongGeometry(primitive)).Returns(actual);

            var logger = new Mock<ILogger>();

            Assert.NotEqual(new LineString(Array.Empty<Coordinate>()), DbHelper._Parse(dispatcher.Object, primitive, logger.Object));
        }
        [Theory]
        [DatFileData("longgeometrybadobjects3.dat", "305F")]
        public void GeoBadObjectByGuid(string guid, string horizon)
        {
            var repository = TestUtils.Repository;
            var primitive = repository.GetByGuid(guid, horizon);
            var actual = repository.GetLongGeometry(primitive, horizon);

            var dispatcher = new Mock<IDbDispatcher>();
            dispatcher.Setup(d => d.GetLongGeometry(primitive)).Returns(actual);

            var logger = new Mock<ILogger>();

            Assert.Equal(new LineString(Array.Empty<Coordinate>()), DbHelper._Parse(dispatcher.Object, primitive, logger.Object));
        }
        [Fact]
        public void ParseNullWkt()
        {
            var wkt = "MULTILINESTRING((),(13833.932 23147.894,13834.375 23147.558))";

            var actual = Regex.Replace(wkt, "\\(\\),?", string.Empty);

            var expected = "MULTILINESTRING((13833.932 23147.894,13834.375 23147.558))";
            Assert.Equal(expected, actual);
        }
    }
}
